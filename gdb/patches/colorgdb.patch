diff --git a/gdb/infrun.c b/gdb/infrun.c
index 842ff6b..3b5ba01 100644
--- a/gdb/infrun.c
+++ b/gdb/infrun.c
@@ -5005,13 +5005,17 @@ print_stop_reason (enum inferior_stop_reason stop_reason, int stop_info)
 	  if (ui_out_is_mi_like_p (uiout))
 	    ui_out_field_string
 	      (uiout, "reason", async_reason_lookup (EXEC_ASYNC_SIGNAL_RECEIVED));
+	  ui_out_text (uiout, "\033[5;91m");
 	  ui_out_field_string (uiout, "signal-name",
 			       target_signal_to_name (stop_info));
+	  ui_out_text (uiout, "\033[0m");
 	  annotate_signal_name_end ();
 	  ui_out_text (uiout, ", ");
 	  annotate_signal_string ();
+	  ui_out_text (uiout, "\033[91m");
 	  ui_out_field_string (uiout, "signal-meaning",
 			       target_signal_to_string (stop_info));
+	  ui_out_text (uiout, "\033[0m");
 	  annotate_signal_string_end ();
 	}
       ui_out_text (uiout, ".\n");
diff --git a/gdb/stack.c b/gdb/stack.c
index 4aad34c..6872873 100644
--- a/gdb/stack.c
+++ b/gdb/stack.c
@@ -342,7 +342,9 @@ print_frame_args (struct symbol *func, struct frame_info *frame,
 	  fprintf_symbol_filtered (stb->stream, SYMBOL_PRINT_NAME (sym),
 				   SYMBOL_LANGUAGE (sym),
 				   DMGL_PARAMS | DMGL_ANSI);
+	  ui_out_text (uiout, "\033[95m");
 	  ui_out_field_stream (uiout, "name", stb);
+	  ui_out_text (uiout, "\033[0m");
 	  annotate_arg_name_end ();
 	  ui_out_text (uiout, "=");
 
@@ -375,7 +377,9 @@ print_frame_args (struct symbol *func, struct frame_info *frame,
 		  opts.deref_ref = 0;
 		  opts.summary = summary;
 		  common_val_print (val, stb->stream, 2, &opts, language);
+		  ui_out_text (uiout, "\033[92m");
 		  ui_out_field_stream (uiout, "value", stb);
+		  ui_out_text (uiout, "\033[0m");
 	        }
 	      else
 		ui_out_text (uiout, "???");
@@ -762,9 +766,11 @@ print_frame (struct frame_info *frame, int print_level,
 
   if (print_level)
     {
+      ui_out_text (uiout, "\033[36m");
       ui_out_text (uiout, "#");
       ui_out_field_fmt_int (uiout, 2, ui_left, "level",
 			    frame_relative_level (frame));
+      ui_out_text (uiout, "\033[0m");
     }
   get_user_print_options (&opts);
   if (opts.addressprint)
@@ -777,12 +783,14 @@ print_frame (struct frame_info *frame, int print_level,
 	ui_out_text (uiout, " in ");
       }
   annotate_frame_function_name ();
+  ui_out_text (uiout, "\033[1;31m");
   fprintf_symbol_filtered (stb->stream, funname ? funname : "??",
 			   funlang, DMGL_ANSI);
   ui_out_field_stream (uiout, "func", stb);
+  ui_out_text (uiout, "\033[0m");
   ui_out_wrap_hint (uiout, "   ");
   annotate_frame_args ();
-      
+
   ui_out_text (uiout, " (");
   if (print_args)
     {
@@ -806,6 +814,7 @@ print_frame (struct frame_info *frame, int print_level,
       ui_out_wrap_hint (uiout, "   ");
       ui_out_text (uiout, " at ");
       annotate_frame_source_file ();
+      ui_out_text (uiout, "\033[1;33m");
       ui_out_field_string (uiout, "file", sal.symtab->filename);
       if (ui_out_is_mi_like_p (uiout))
 	{
@@ -813,10 +822,13 @@ print_frame (struct frame_info *frame, int print_level,
 	  if (fullname != NULL)
 	    ui_out_field_string (uiout, "fullname", fullname);
 	}
+      ui_out_text (uiout, "\033[0m");
       annotate_frame_source_file_end ();
       ui_out_text (uiout, ":");
       annotate_frame_source_line ();
+      ui_out_text (uiout, "\033[1;32m");
       ui_out_field_int (uiout, "line", sal.line);
+      ui_out_text (uiout, "\033[0m");
       annotate_frame_source_end ();
     }
 
