diff --git a/gdb/infrun.c b/gdb/infrun.c
index cf6c062..0d5f2f5 100644
--- a/gdb/infrun.c
+++ b/gdb/infrun.c
@@ -5775,13 +5775,17 @@ print_signal_exited_reason (enum gdb_signal siggnal)
       (uiout, "reason", async_reason_lookup (EXEC_ASYNC_EXITED_SIGNALLED));
   ui_out_text (uiout, "\nProgram terminated with signal ");
   annotate_signal_name ();
+  ui_out_text (uiout, "\033[5;91m");
   ui_out_field_string (uiout, "signal-name",
 		       gdb_signal_to_name (siggnal));
+  ui_out_text (uiout, "\033[0m");
   annotate_signal_name_end ();
   ui_out_text (uiout, ", ");
   annotate_signal_string ();
+  ui_out_text (uiout, "\033[91m");
   ui_out_field_string (uiout, "signal-meaning",
 		       gdb_signal_to_string (siggnal));
+  ui_out_text (uiout, "\033[0m");
   annotate_signal_string_end ();
   ui_out_text (uiout, ".\n");
   ui_out_text (uiout, "The program no longer exists.\n");
diff --git a/gdb/stack.c b/gdb/stack.c
index 51747ea..88915e2 100644
--- a/gdb/stack.c
+++ b/gdb/stack.c
@@ -239,7 +239,9 @@ print_frame_arg (const struct frame_arg *arg)
   if (arg->entry_kind == print_entry_values_only
       || arg->entry_kind == print_entry_values_compact)
     fputs_filtered ("@entry", stb);
+  ui_out_text (uiout, "\033[95m");
   ui_out_field_stream (uiout, "name", stb);
+  ui_out_text (uiout, "\033[0m");
   annotate_arg_name_end ();
   ui_out_text (uiout, "=");

@@ -287,7 +289,9 @@ print_frame_arg (const struct frame_arg *arg)
 			  except.message);
     }

+  ui_out_text (uiout, "\033[92m");
   ui_out_field_stream (uiout, "value", stb);
+  ui_out_text (uiout, "\033[0m");

   /* Also invoke ui_out_tuple_end.  */
   do_cleanups (old_chain);
@@ -777,9 +781,11 @@ print_frame_info (struct frame_info *frame, int print_level,
          to list for this frame.  */
       if (print_level)
         {
+          ui_out_text (uiout, "\033[36m");
           ui_out_text (uiout, "#");
           ui_out_field_fmt_int (uiout, 2, ui_left, "level",
 				frame_relative_level (frame));
+	  ui_out_text (uiout, "\033[0m");
         }
       if (ui_out_is_mi_like_p (uiout))
         {
@@ -1143,12 +1149,14 @@ print_frame (struct frame_info *frame, int print_level,
 	ui_out_text (uiout, " in ");
       }
   annotate_frame_function_name ();
+  ui_out_text (uiout, "\033[1;31m");
   fprintf_symbol_filtered (stb, funname ? funname : "??",
 			   funlang, DMGL_ANSI);
   ui_out_field_stream (uiout, "func", stb);
+  ui_out_text (uiout, "\033[0m");
   ui_out_wrap_hint (uiout, "   ");
   annotate_frame_args ();

@@ -1183,6 +1191,7 @@ print_frame (struct frame_info *frame, int print_level,
       ui_out_wrap_hint (uiout, "   ");
       ui_out_text (uiout, " at ");
       annotate_frame_source_file ();
+      ui_out_text (uiout, "\033[1;33m");
       ui_out_field_string (uiout, "file", sal.symtab->filename);
       if (ui_out_is_mi_like_p (uiout))
 	{
@@ -1191,10 +1200,13 @@ print_frame (struct frame_info *frame, int print_level,
 	  if (fullname != NULL)
 	    ui_out_field_string (uiout, "fullname", fullname);
 	}
+      ui_out_text (uiout, "\033[0m");
       annotate_frame_source_file_end ();
       ui_out_text (uiout, ":");
       annotate_frame_source_line ();
+      ui_out_text (uiout, "\033[1;32m");
       ui_out_field_int (uiout, "line", sal.line);
+      ui_out_text (uiout, "\033[0m");
       annotate_frame_source_end ();
     }
