#! /bin/sh

# hadduck backup
# (C) 2021-2022 Jérémie Roquet <jroquet@arkanosis.net>
# Released under the ISC license

set -e

VERSION='v0.1.0'

APPDIR='$(dirname "$(readlink -f "$0")")'

usage() {
    echo 'Usage: hadduck <drive>'
}

if [ $# -eq 0 ] || [ "x$1" = 'x-h' ] || [ "x$1" = 'x--help' ]; then
    usage
    exit 0
elif [ "x$1" = 'x--version' ]; then
    echo "hadduck $VERSION"
    exit 0
elif [ $# -ne 1 ]; then
    usage >&2
    exit 1
fi

START="$(date)"
HOST="$(hostname)"
OS="$(sed -n 's/^ID=//p' /etc/os-release)"
DRIVE="$(echo "$1" | sed 's/@.*//')"
REMOTE="$(echo "$1" | sed -n 's/[^@]*@\([^@]\+\)\?$/\1/p')"
BACKUP="${HOST}_$(date +%Y-%m-%d-%H-%M-%S)"

if [ "x$DRIVE" = 'xGymir' ] || [ "x$DRIVE" = 'xNjord' ] || [ "x$DRIVE" = 'xVaruna' ]; then
    BACKEND='borg'
elif [ "x$DRIVE" = 'xSusanoo' ]; then
    BACKEND='restic'
elif [ "x$DRIVE" = 'xNeptune' ] || [ "x$DRIVE" = 'xPoseidon' ] || [ "x$DRIVE" = 'xTyphon' ] || [ "x$DRIVE" = 'xAegir' ]; then
    BACKEND='rsnapshot'
else
    echo "Unknown drive '$DRIVE', exiting" >&2
    exit 1
fi

if [ -z "$REMOTE" ]; then
    if [ "x$OS" = 'xarch' ]; then
        TARGET="/run/media/arkanosis/$DRIVE"
    elif [ "x$OS" = 'xdebian' ] || [ "x$OS" = 'xubuntu' ]; then
        TARGET="/media/arkanosis/$DRIVE"
    else
        echo "Unknown OS '$OS', exiting" >&2
        exit 1
    fi

    if ! [ -d "$TARGET" ]; then
        echo "'$TARGET' is not mounted, exiting" >&2
        exit 1
    fi
else
    if [ "x$HOST" = 'xCyclamen' ]; then
        PORT=2214
    elif [ "x$HOST" = 'xMimosa' ]; then
        PORT=2228
    elif [ "x$HOST" = 'xbismuth' ]; then
        PORT=2222
    else
        echo "Host '$HOST' not supported for remote backup"
    fi
    TARGET="ssh://borgbackup@localhost:$PORT/run/media/arkanosis/$DRIVE"
fi

if [ "x$BACKEND" = 'xborg' ]; then
    TARGET="$TARGET/borgbackup/$HOST/"
elif [ "x$BACKEND" = 'xrestic' ]; then
    TARGET="$TARGET/resticbackup"
    echo "Unsupported backend '$BACKEND', exiting" >&2
    exit 1
else
    echo "Unsupported backend '$BACKEND', exiting" >&2
    exit 1
fi

if [ "x$HOST" = 'xgossamer' ]; then
    for username in 'arkanosis' 'nonfreegaming'; do
        if ! [ -d "/home/$username/.local" ]; then
            echo "'/home/$username' is not decrypted, exiting" >&2
            exit 1
        fi
    done
    if ! [ -d '/mnt/hdd' ]; then
        echo "'/mnt/hdd' is not mounted, exiting" >&2
        exit 1
    fi
    for directory in /mnt/*; do
        if [ "x$directory" != 'x/mnt/hdd' ]; then
            echo "Unexpected directory '$directory', exiting" >&2
            exit 1
        fi
    done

    if [ "x$BACKEND" = 'xborg' ]; then
        cd && \
            mount.ecryptfs_private Sauvegardes && \
            cd / && \
            sudo borg create \
                 --stats \
                 --progress \
                 --compress lz4 \
                 "$TARGET::$BACKUP" \
                 ./ \
                 --exclude-from "$APPDIR/hadduck.exclude" \
                 --exclude-caches
    elif [ "x$BACKEND" = 'xrestic' ]; then
        cd && \
            mount.ecryptfs_private Sauvegardes && \
            cd / && \
            sudo restic \
                 -r "$TARGET" \
                 --verbose \
                 backup ./ \
                 --exclude-file "$APPDIR/hadduck.exclude" \
                 --exclude-caches
    else
        echo "Unsupported backend '$BACKEND', exiting" >&2
        exit 1
    fi
elif [ "x$HOST" = 'xmarvin' ] || [ "x$HOST" = 'xtaz' ] || [ "x$HOST" = 'xEdelweiss' ] || [ "x$HOST" = 'xCyclamen' ] || [ "x$HOST" = 'xMimosa' ]; then
    if [ "x$HOST" = 'xCyclamen' ]; then
        echo "Add /mnt/hdd to exclusions (change the mountpoint?)" >&2
        exit 1
    fi

    if [ "x$BACKEND" = 'xborg' ]; then
        cd / && \
            sudo borg create \
                 --stats \
                 --progress \
                 --compress lz4 \
                 "$TARGET::$BACKUP" \
                 ./ \
                 --exclude-from "$APPDIR/hadduck.exclude" \
                 --exclude-caches
    elif [ "x$BACKEND" = 'xrestic' ]; then
        cd / && \
        sudo restic \
             -r "$TARGET" \
             --verbose \
             backup ./ \
             --exclude-file "$APPDIR/hadduck.exclude" \
             --exclude-caches
    else
        echo "Unsupported backend '$BACKEND', exiting" >&2
        exit 1
    fi
elif [ "x$HOST" = 'xbismuth' ]; then
    if [ "x$BACKEND" = 'xborg' ]; then
        cd / && \
            sudo borg create \
                 --stats \
                 --progress \
                 --compress lz4 \
                 "ssh://borgbackup@localhost:$PORT/home/borgbackup/backups/$HOST/::$BACKUP" \
                 ./ \
                 --exclude-from "$APPDIR/hadduck.exclude" \
                 --exclude-caches
    else
        echo "Unsupported backend '$BACKEND', exiting" >&2
        exit 1
    fi
else
    echo "Unknown host '$HOST' to backup" >&2
    exit 1
fi

(
    echo "Start: $START"
    echo "End: $(date)"
    echo "Host: $HOST"
    echo "Drive: $DRIVE"
    echo "Backend: $BACKEND"
) | mail -Sttycharset=utf8 -s "Sauvegarde de $HOST sur $DRIVE effectuée avec succès" arkanosis@gmail.com

echo 'Backup finished'

if [ -f '/etc/smartd.conf' ]; then
    echo 'Checking SMART…'
    sudo sed -i 's/@[^ ]\+$/& -M test/' '/etc/smartd.conf'
    sudo systemctl restart smartd.service
    sudo sed -i 's/ -M test$//' '/etc/smartd.conf'
    echo 'Emails should have been sent for:'
    cut -d ' ' -f 1 '/etc/smartd.conf'

    # TODO run a SMART test now?
else
    echo 'SMART not checked'
fi

# TODO run a fstrim now (but only *after* unmounting the backup filesystem!)
#echo 'Running fstrim…'
#sudo systemctl start fstrim
