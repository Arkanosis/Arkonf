^-L : Effacer l'ecran
^-R : Chercher dans l'historique
^-x : Executer une commande zsh
^-_ : Undo
M-^_ : Recopie l'argument précédent une deuxième fois
M-a : Valider la commande mais la garder tapée
<cmd> !:<n>[-<m>] : Execute cmd avec le n argument de la commande precedente (jusqu'au m)
<cmd> arg1 arg2 !#:<n> : Recopie l'argument n de la ligne courante une deuxieme fois
!! : Derniere commande
!!:[g]s/<from>/<to>/ : Derniere commande avec substitution
!<n> : Execute la n eme commande de l'historique
<glob>~<glob> : Soustraction des resultats
=<cmd> : équivalent à `which <cmd>`

base#valeur : correspond à valeur en base base, à utiliser : $((16#ff)) <=> $((0xff))
$(([#base]valeur)) : affiche valeur en base base

cd <a> <b> : remplace <a> par <b> dans pwd. L'autocomplétion marche sur <b>

zmv au lieu de mv pour faire des déplacements / renommages complexes, plus d'infos dans ${^fpath}/zmv(N)
idem zcp et zln

lsof pour lister les fichiers ouverts (dont les bibliotheques)
lsusb pour lister les périphériques usb connectés
dmesg pour voir les derniers évènements

trap <code> <signal> : executera <code> a chaque <signal>

vared : pour éditer une variable d'environnement
zed -f : pour éditer une fonction

$var:gs/<from>/<to> : pour modifier une variable à la volée
$var:u : majuscule
$var:l : minuscule
$var:h : chemin uniquement
$var:r : fichier uniquement
$var:e : extension uniquement

--

zstyle ':completion:*:rm:*' ignore-line yes # évite que le même fichier soit autocomplété deux fois (ici pour rm)
compdef _toto tata # utilise l'autocompletion de toto pour tata
compdef _gnu_generic toto # utiliser la completion intelligente quand --help fonctionne


Autocompletion super rapide :
function laFonction { reply=(mot1 mot2 mot3); }
compctl -K laFonction laCommande
(à éviter, préférer zstyle)

ctrl+shift+vernum : active/désactive le numpad (sinon en mode souris)
mod+shift+q : tue le WM (metacity ou xmonad)

curlftpfs ftp://ftp.sunet.se/ sunet/
fusermount -u sunet/

write <username> # envoie un message à l'utilisateur (dans le genre net send sous windows, pourrit la console et tout)

*.txt<tab> -> toto.txt titi.txt
*.txt<shift+tab> -> menu de sélection dans les .txt

En ZSH, inutile de mettre des quotes autour des variables : elles sont quotées implicitement (contrairement a avec sh).
a="toto lol" => $a n'est *pas* un tableau (utiliser $=a pour transformer en tableau à deux éléments)

Pour évaluer du globbing stocké dans une variable, utiliser $~var.
Exemple :
 echo $a => *.txt
 echo $~a => toto.txt tutu.txt

Utiliser [[ ]] plutôt que [ ]. Avantages :
 - Robuste aux variables vides : [ $x = "toto" ] casse si $x est vide, pas [[ $x = "toto" ]]
 - [[ toto && titi ]] est supporté (|| aussi)

Pour les tests arithmétiques, utiliser (( )), exemple : if ((x > 5)); then

sux: comme su, mais permet d'utiliser le serveux X

pour prendre un screenshot sous X :
  chvt 7;sleep 10;import -display :0.0 -window root image.png
dans un vt. chvt passe sur le vt de X

Quand en ssh, taper "~C" permet de taper une commande SSH (créer un tunnel par exemple)

Pour lancer un serveur http servant le répertoire courant sur le port 8000
  python -m SimpleHTTPServer

Sous emacs :
 - query-replace : alt + %
 - matching-paren : ctrl+alt+{b,n}
 - paragraph : alt+{ / }
 - indent : ctrl+alt+\
 - auto-revert-mode pour recharger automatiquement un fichier
 - C-U M-! <command> pour executer une commande shell et récupérer le résulat
 - M-x vc-annotate pour svn blame

Sous TSClient :
 - ctrl+alt+entrée pour sortir du mode plein-écran
