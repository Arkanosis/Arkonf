- duplicates plus utile avec fdupes ?

- patcher ZSH : ajouter une nouvelle fonctionnalité (généralisation du principe zcp / zmv à toutes les commandes, avec une syntaxe plus simple) :
   une commande du genre « mv toto.[ch]pp titi.$1pp » doit s'étendre en « mv toto.cpp titi.cpp^Jmv toto.hpp titi.hpp » et non « mv toto.cpp toto.hpp titi.pp »
   activé via une option
   déclenché lorsqu'une ligne de commande contient un ou plusieur $N (où N entier)

- Si ccze est installé, l'utiliser automatiquement lors d'un tail sur un *.log. Voir éventuellement à recoder ccze en sed pour l'avoir partout. Installer aussi multitail

- Recherche dans l'historique sous forme de menu (comme history-beginning-search-menu, mais en interactif et avec coloration)

- Filtrage /à posteriori/ des autocompletions d'un menu : <tab> ⇒ menu avec tous les fichiers, *.cpp ⇒ uniquement les cpp, A* ⇒ uniquement les cpp commençant par A ; ctrl+c annule le dernier refine

- Supprimer tous les mots clefs 'function'

- Amélioration de runin pour avoir l'autocomplétion dans le répertoire cible
- Wrapper autour de runin pour profiter de l'autocomplétion, par exemple "ee" est un wrapper pour "runin edk emacs -nw" et autocomplète dans edk

- gestion des priorités / dates de fin pour la todo list

- Trouver un moyen de faire dialoguer le shell avec ses sous process détachés (&!) (pour monitor_pages et update_cvs_information)

- Réindenter tout le code proprement

- mvcd, cpcd, lncd
- mkcpcd, mkmvcd

- Rebinder les déplacements sur jklm comme dans vim, screen, xmonad et rebinder gmail et google reader de la même façon

- Completion intelligente pour toutes les commandes de VCS, y compris celles de conf (rediriger les autocomplétions qui vont bien, suivant le VCS en question)
- Autocompletion pour les commandes en runin ou en dist (redirection de l'autocomplétion), ainsi que pour mvi et cpi

- Mod + entrée => cd + ll

- coloration syntaxique basique (module highlight)

- Apprendre la syntaxe complète de zstyle

- zm / zc / zt, nouveau module, comme zmv et zcp, mais avec la syntaxe de sed :
  zm 's/[[:lower:]]/[[:upper:]]/g'
  zm '/\.mp3$/ s/ /_/g'
  zt affiche les modifications potentielles sans les effectuer

- zf : autocomplétion sur les fonctions, alias, bindkeys... de zArkonf, ouvre le bon fichier à la bonne ligne
  Alternative à zed -f en plus complet et avec un vrai éditeur de texte

- /r fait comme / (search), mais prend en premier argument une regexp sur le nom des fichiers dans lesquels checher (utiliser -exec grep -exec)
- /g idem, mais globbing au lieu de regexp (utiliser -name -exec)

- Bookmarks permanents (utiliser un fichier), avec listage, avertissement en cas de doublon, suppression, hash -d...

- Ne pas charger ZARKONF si mode non interactif, résoud (probablement) les problèmes de scp

- Améliorer le support des caractères accentués pour zstyle (au besoin, patcher ZSH qui supporte ça très mal)
- Dans la coloration des options (-<nomOption>), colorer en rouge l'option (et laisser la description en blanc)

- Révision / branche dans le prompt pour CVS, Darcs
- vcsroot pour hg, git et darcs

- Finir tree() : doit être compatible avec toutes les options de gls

- Arc plus complet :
 - factorisation du code
 - plus de formats supportés
 - correction de la gestion de l'absence de dossier racine (trouver une méthode robuste aux changements de binaires)
 - compression intelligente (LZMA avec les bonnes options, PPMd pour le texte)
 - Mise en cache des listages (notamment pour le tar.xz)

- LS_COLOR généré avec une fonction, plutôt qu'à la main

- Zsh à la sauce ViM (raccourcis, indication du mode...)

- Raccouci 'suivant' symétrique à popd ; voire gestion d'un arbre de parcours

- Installeur :
 - Téléchargement de la dernière version si internet dispo (http://zarkonf.arkanosis.net/latest) avec wget
 - Affichage de 'zArkonf N.M, (C) 200...'
 - Le répertoire 'modules' est parcouru, et si un module est installé, son script 'install' est lancé
 - Chaque module installé ajoute sa ligne 'source' dans ~/.zshrc
 - Choix du binding clavier (+ fonction pour passer rapidement en mode clavier pour le développement)
 - Passer un coup de sed -i sur le .zshrc pour changer $ARKONF_DIR

- Notes :
 - tuto rapide du globbing (soustraction *et* répertoires avec attributs des fichiers...)
 - récapitulatif des raccourcis claviers
 - Version actuelle de zArkonf
 - Note temporaires

- Notes temporaires :
 - note <arg> ajoute arg dans les notes temporaires ~/.znotes
 - ^[? affiche les notes temporaires numérotées
 - rmnote <num> supprime la note num de ~/.znotes

- Développements spécifiques
 - Nombres de mails non lus dans le prompt (GMail, Hotmail, Facebook, page de discussion Wikipédia, Exalead, BuildBot...)
 - Nombre en rouge foncé lorsqu'il a changé depuis le dernier prompt, en gris sinon (pour ne pas attirer inutilement l'attention)
 - Possibilité de forcer une couleur (par exemple, les messages du buildbot restent en rouge)
 - Fonction pour afficher les objets des mails nons lus sans avoir à switcher avec Firefox
 - Utilisation d'un programme externe (Python ?) tournant en tâche de fond pour ne pas ralentir le shell

  Cyclamen:4~zarkonf/.zsh (0) [git:master:7321ac] [G:2 W:1 E:1 B:6]
  511 $

- Bindings clavier :
 - utiliser loadkeys plutôt que xkb ou xmodmap (fonctionne en console, ssh...)
 - /usr/share/keymaps/i386/qwerty/us-acentos.map.gz ...

- GTD : webservice en django (django-traq par exemple) avec interfaçage en zsh pour avoir les tâches direct dans le terminal et interfaçage en java pour les avoir sur le téléphone mobile (avec possibilité de ne synchroniser que sur une période horaire donnée — quand le net est gratos)
