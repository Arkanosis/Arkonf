#compdef exa

# Exa completion
# contact: Jérémie Roquet <jroquet@exalead.com>

local functions

functions=()

base="/ng/src/$USER/svn"
roots=("edk/edk" "platform/semantic" "platform/semantic-build" "labs/twitter")
cache="$ZARKONF_CACHE/exa"

fullRoots=()
for root in $roots; do
    fullRoots=($fullRoots "$base/$root/trunk")
done
roots=($fullRoots)

if test -f "$cache"; then
    source "$cache"
else
    for root in $roots; do
	for file in `ls $root/**/*.exa`; do
	    package=`echo $file | sed "s_${root}/\(.*\)/[^/]\+\.exa_\1_ ; s_/_._g"`
	    for func in `sed -n 's/.*public[ \t]\+\(void\|int\)[ \t]\+\([^ \t(]\+\)[ \t]*(\(String\(Constant\)*\[\][^)]*\)*).*/\2/p' "$file"`; do
		functions=($functions "$package.$func")
	    done
	done
    done

    echo "functions=($functions)" > "$cache"
fi

if [[ $service == "exa" ]]; then
    _arguments -C -A "-*" \
     '-license[The license file to use (overrides NGLICENSE)]:license file:_files' \
     '-noeval[Disable runtime compilation capabilities]' \
     '-native[Add a native dll to the dll lookup list (stored in binary or appened at runtime)]:native dll:_files -g \*.so' \
     '-outbin[Create binary file BIN]:binary file:_files' \
     '-bin[Use binary file BIN]:binary file:_files' \
     '-outlib[Write library LIB]:output library:_files -g \*.so' \
     '-lib[Read  a library LIB (override  EXALIB)]:library file:_files -g \*.so' \
     '-cachedir[Use DIR as compilation cache directory (override EXACACHEDIR)]:compilation cache directory:_files -/' \
     '-nocache[Disable compilation cache]' \
     '-srcpath[Set source path (override EXASRCPATH)]:source path:_files -/' \
     '-trace[Trace program with tracer from class CLASS]:class' \
     '-dtd[Output to stdout an ExaScript translation of DTD file.dtd]:dtd:_files -g \*.dtd' \
     '-xsd[Output to stdout n ExaScript translation of XML Schema file.xsd]:xsd:_files -g \*.xsd' \
     '-v[Print the bytecode]' \
     '-g[Generate debugging information]' \
     '-t[Show execution time]' \
     '-profile[Write profile info in FILE (with exa.profile executable)]:profile file:_files' \
     '-profagent[Load ProfilerInterface agent LIB]:library file:_files -g \*.so' \
     '-profopts[Give the following arguments to the profiling agent]:arguments' \
     '-s[Generate C stubs for native functions in PATH]:path:_files -/' \
     '-D[Activate debug option DEBUG]:debug option' \
     '-export[Export only symbols marked with tags SPEC1 or SPEC2 or ..]:tags' \
     '-service[Run a daemon thread executing function fun, reloaded in case of error]:function' \
     '-job[Run a parallel job]:function' \
     '-script[Run a script file]:exascript file:_files -g \*.exa' \
     '-d[Display the library file containing a package native code]:package' \
     '-p[Compile and run a package]:package' \
     '-service[Run a daemon thread executing function fun, reloaded in case of error]:fun' \
     '-job[Run a parallel job]:fun' \
     '-wait[Wait on exit]' \
     '-free[Free on exit]' \
     '-cstat[Log memory consumption stats]' \
     '-antistub[Add stub declaration from file]:stub file:_files' \
     '-unreachable[Enable unreachable statements warnings]' \
     '-parano[Enable paranoid mode]' \
     '-mlock[memory-lock Exa memory]' \
     '-xp[Turn on experimental and weird features]' \
     '-printpackagelist[Dump a list of all packages used by the specified binary or sources]' \
    '*::command:->subcmd' && return 0

    if (( CURRENT == 1 )); then
        _wanted commands expl 'exa command' compadd -a functions
        return
    fi
    service="$words[1]"
    curcontext="${curcontext%:*}=$service:"
fi

_arguments '*:file:_files'