# "-*- sh -*-"

csrcexts_pattern='*.('
for csrcext in $csrcexts; do
    csrcexts_pattern+="|$csrcext"
done
csrcexts_pattern+=')'

srcexts_pattern='*.('
for srcext in $srcexts; do
    srcexts_pattern+="|$srcext"
done
srcexts_pattern+=')'

csrcnames=()
for csrcext in $csrcexts; do
    csrcnames+=(-name \*.$csrcext -o)
done
csrcnames=$csrcnames[0,-2]
srcnames=()
for srcext in $srcexts; do
    srcnames+=(-name \*.$srcext -o)
done
srcnames=$srcnames[0,-2]

excluded_files=(
    '*.cache' '*.deps' '*.lo' '*.log' '*.m4' '*.mk' '*.output' '*.status' '*~' '.*~' '*.bak'
    'Makefile.in' 'autom4te.cache' 'callgrind.out' 'configure'
)
excluded_dirs=(
    '*.bak' '.git' '.hg' '.svn'
)
excluded_dists=(
    'ChangeLog' 'INSTALL' 'Makefile' 'NEWS' 'NOTES' 'README' 'TODO'
)
exclusions=()
for excluded_file in $excluded_files; do
    exclusions+=(--exclude $excluded_file)
done
for excluded_dir in $excluded_dirs; do
    exclusions+=(--exclude-dir $excluded_dir)
done
exclusions_dist=exclusions
for excluded_dist in $excluded_dists; do
    exclusions_dist+=(--exclude $excluded_dist)
done

function search()
{
    local dist casi xfile xdir dir exp

    dist=0
    casi=

    if ((# < 1)); then
	echo 'Usage: search [-d] [-i] [dir] <exp>' >&2
	return 1
    fi

    if ((# > 1)) && [[ $1 = -i ]]; then
	casi=-i
	shift
    fi

    if ((# > 1)) && [[ $1 = -d ]]; then
	dist=1
	shift
    fi

    if ((# > 2)) && [[ $1 = -x ]]; then
	xfile+="--exclude $2"
	shift 2
    fi

    if ((# > 2)) && [[ $1 = -xd ]]; then
	xdir+="--exclude-dir $2"
	shift 2
    fi

    dir=.

    if ((# == 2)); then
	dir=$1
	shift
    fi

    exp=$1

    shift

    if ((dist)); then
	grep -nRI $casi $=xfile $=xdir $=exclusions_dist -- $exp $dir $@
    else
	grep -nRI $casi $=xfile $=xdir $=exclusions -- $exp $dir $@
    fi
}

function /()
{
    search $@
}
alias /='noglob /'
function /i()
{
    search -i $@
}
alias /i='noglob /i'
function /l()
{
    search $@ | less -r
}
alias /l='noglob /l'
function /il()
{
    search -i $@ | less -r
}
alias /il='noglob /il'
alias /li='noglob /il'
function /f()
{
    local dir

    dir=.

    if ((#)); then
	dir=$1
	shift
    fi

    find $dir -type f $@
}
function /d()
{
    dir=.

    if ((#)); then
	dir=$1
	shift
    fi

    find $dir -type f $@
}
function /z()
{
    runin $ZARKONF_DIR search $@
}
function /a()
{
    runin $ARKONF_DIR search $@
}
function /r()
{
    local i dir files exp res

    if [[ $1 = -i ]]; then
	i=-i
	shift
    fi

    if ((# < 2 || # > 3)); then
	echo 'Usage: /r [-i] [dir] <files pattern> <exp>' >&2
	return 1
    fi

    dir=.

    if ((# == 3)); then
	dir=$1
	shift
    fi

    files=$1
    exp=$2

    case $files in
	cpp)
	    files=$csrcexts_pattern
	;;
	exa)
	    files='*.exa'
	;;
	java)
	    files='*.(java|jj)'
	;;
	jexo)
	    files='*.(exa|java|jj|gexo)'
	;;
	src)
	    files=$srcexts_pattern
	;;
    esac

    shift 2

    for file in $dir/**/$~files; do
	    res=`grep -n $i -- $exp $file`
	    if ! ((?)); then
		echo "\e[1;33m$file\e[0m"
		echo $res | grep $i -- $exp
	    fi
    done
}
alias /r="noglob /r"
function /x()
{
    local i dir files exp

    if [[ $1 = -i ]]; then
	i=-i
	shift
    fi

    if ((# < 3)); then
	echo 'Usage: /x [-i] <dir> <files pattern> <exec>' >&2
	return 1
    fi

    dir=$1
    files=$2

    case $files in
	cpp)
	    files=$csrcnames
	;;
	src)
	    files=$srcnames
	;;
    esac

    shift 2

    find $dir -type f \( $=files \) -exec $@ \;
}
alias /x="noglob /x"

function /t()
{
    search 'TODO\|FIXME\|HACK'
}

function rd()
{
    if ((#)); then
	if [[ -f $1/README ]]; then
	    less $1/README
	    return 0
	fi
    else
	if [[ -f ./README ]]; then
	    less ./README
	    return 0
	fi
    fi
    echo 'No README file in this directory' >&2
    return 1
}

function checkheaders()
{
    find . \( -name '*.hh' -o -name '*.hpp' -o -name '*.hxx' \) -exec awk '
/# *ifndef/ {
  guard = $(NF)
  left = 3
}

/# *define/ {
  if (left > 0) {
    left = 0
    if ($(NF) != guard) {
      print $(NF) " vs " guard
      error = 1
      exit
    } else
      exit
  }
}

{
  --left
}

END {
  if (!error)
    exit 1
}
' {} \; -print
}
