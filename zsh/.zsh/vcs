# "-*- sh -*-"

vcsrootpattern='(trunk|branches/([0-9]##(.[0-9]##)#(|dev|-*)|V[0-9]R20[0-9][0-9](|x|X)(|-V[0-9]R20[0-9][0-9](|x|X)(|.SP[0-9]).[0-9]##-[0-9a-zA-Z-]##)))'
VCS=
PREVIOUS_PWD=

whichvcs() {
	local base_dir

	if [[ -d .svn ]]; then
		echo svn
	elif [[ -d CVS ]]; then
		echo cvs
	else
		base_dir=.
		while [[ ! -d $base_dir/.hg && ! -d $base_dir/.git&& ! -d $base_dir/.svn && $base_dir:A != / ]]; do
			base_dir=$base_dir/..
		done
		if [[ -d $base_dir/.hg/ ]]; then
		    echo hg
		elif [[ -d $base_dir/.git/ ]]; then
		    echo git
		elif [[ -d $base_dir/.svn/ ]]; then
		    echo svn
		fi
	fi
}

typeset -A VCS_REVISION
VCS_REVISION=()

# TODO regarder http://briancarper.net/blog/570/git-info-in-your-zsh-prompt
update_vcs_information() {
    local base_dir branch

    VCS=''
    if [[ -d .svn ]] ; then
        VCS="[svn:$(svn info | sed -n '/R.vision \?:/ s/.* \(.*\)/\1/p')]"
    fi
    base_dir='.'
    while [[ ! -d $base_dir/.hg && ! -d $base_dir/.git && ! -d $base_dir/.svn && $base_dir:A != / ]]; do
	base_dir=$base_dir/..
    done
    if [[ -d $base_dir/.hg/ ]]; then
	if [[ -f $base_dir/.hg/branch ]]; then
	    VCS="${VCS}[hg:$(< $base_dir/.hg/branch):$(hg id -n)]"
	else
	    VCS="${VCS}[hg:default:$(hg id -n)]"
	fi
    elif [[ -d $base_dir/.git/ ]]; then
	branch=$(git branch | command grep '^\*')
	if git describe --always >& /dev/null; then
	    VCS="${VCS}[git:$branch[3,-1]:$(git describe --always)]"
	else
	    VCS="${VCS}[git:uncommited]"
	fi
    elif [[ -d $base_dir/.svn/ ]]; then
        VCS="[svn:$(svn info | sed -n '/R.vision \?:/ s/.* \(.*\)/\1/p')]"
    fi

    VCS_REVISION[$PWD]=$VCS
}

update_vcs_information_if_needed() {
    # TODO idem si derniere commande = git checkout
    VCS=$VCS_REVISION[$PWD]
    if [[ -z $NO_VCS_INFO ]] && [[ -z $VCS ]] && [[ -z $PREVIOUS_PWD || $PREVIOUS_PWD != $PWD ]]; then
	PREVIOUS_PWD=$PWD
	update_vcs_information
    fi
}

vcsroot () {
    local cmd base_dir

    cmd=$1
    shift

    base_dir=.
    while [[ -d $base_dir/../.svn || -d $base_dir/../CVS || $base_dir:A == */$~vcsrootpattern/* ]] && [[ $base_dir:A != */$~vcsrootpattern ]]; do
	base_dir=$base_dir/..
    done
    echo "Running $cmd on $base_dir:A"
    $cmd $@ $base_dir
}

runinroot () {
    local base_dir

    base_dir=.
    while [[ -d $base_dir/../.svn || -d $base_dir/../CVS || $base_dir:A == */$~vcsrootpattern/* ]] && [[ $base_dir:A != */$~vcsrootpattern ]]; do
	base_dir=$base_dir/..
    done
    if [[ $base_dir:A == */$~vcsrootpattern ]]; then
        runin $base_dir $@
    fi
}

co() {
    hg clone $@ ||
    svn co $@  ||
    git clone $@  ||
    cvs -d $1 co $2 ||
    (
	echo This is not a know repository >&2
	return 1
    )
}

ch() {
    git checkout $@
    update_vcs_information
}

colorizeAdd() {
    while read line; do
	line=$(echo $line | sed -e 's/^A[ 	].\+/\\\\e[1;32m&\\\\e[0m/')
	echo $line
    done
}

add() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	svn)
	    svn add $@ | colorizeAdd
	;;
	cvs)
	    for path; do
		find $path -exec cvs add {} | colorizeAdd \;
	    done
	;;
	hg|git)
	    $vcs add $@
	;;
    esac
}

unadd() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	svn)
	    svn rm -R --keep-local $@ | colorizeAdd
	;;
	git)
	    $vcs unadd $@
	;;
    esac
}

ci() {
    local vcs

    # TODO FIXME when vcsroot will be fixed, make so that :
    # - ci commit the current directory or the given arguments, if there are some (to be fixed for hg, git)
    # - rci commit the whole project (to be fixed for hg, git)
    # same for df / rdf / dfl / rdfl / st / rst...
    vcs=$(whichvcs)
    case $vcs in
	svn|cvs)
	    $vcs ci $@
	;;
	hg)
	    hg ci -v $@
	;;
	git)
	    if ((#)); then
		git commit -S $@
	    else
		git commit -Sa $@
	    fi
	;;
    esac

    update_vcs_information
}
rci() {
    vcsroot ci $@
}
cif() {
    ci -F $@
}

unci() {
    git uncommit $@

    update_vcs_information
}

am() {
    ci --amend $@
}

unam() {
    git unamend $@

    update_vcs_information
}

push() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	hg|git)
	    $vcs push $@
	;;
    esac
}

colorizeStatus() {
    while read line; do
	line=$(echo $line | sed -e '
                s/^A[ 	].\+/\\\\e[1;32m&\\\\e[0m/' -e '
                s/^D[ 	].\+/\\\\e[1;31m&\\\\e[0m/' -e '
                s/^[MU][ 	].\+/\\\\e[1;34m&\\\\e[0m/' -e '
                s/^C[ 	].\+/\\\\e[1;91m&\\\\e[0m/' -e '
                s/^[?G][ 	].\+/\\\\e[1;35m&\\\\e[0m/' -e '
                s/35\(m?[ 	].\+\.\\(log\|bak\|local\)\)/38;5;239\1/')
	echo $line
    done
}

st() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	svn|cvs)
	    if [[ $1 = '-f' ]]; then
		shift
		$vcs st $@ | grep -v '^\?' | colorizeStatus
	    else
		$vcs st $@ | colorizeStatus
	    fi
	;;
	hg)
	    hg st $@ .
	;;
	git)
	    if [[ $1 = '-f' ]]; then
		shift
		if ((#)); then
		    git st -uno $@
		else
		    git st -uno .
		fi
	    else
		if ((#)); then
		    git st $@
		else
		    git st .
		fi
	    fi
	;;
    esac
}
stf() {
    st -f $@
}
sf() {
    st -f $@
}
stl() {
    st $@ | less
}
stm() {
    local files
    for file in $(nocolor st -f | grep '^[^X] ' | cut -d ' ' -f 2); do
	files+=($file)
    done
    echo $files
}
rst() {
    vcsroot st $@
}
rft() {
    rst -f $@
}
rsf() {
    rst -f $@
}
rstl() {
    vcsroot stl $@
}

sls() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	svn)
	    $vcs ls $(svn info --xml | xmlstarlet sel -T -t -c '//info/entry/url')/"$1"
	;;
    esac

    update_vcs_information
}

up() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	svn|cvs)
	    $vcs up $@ | colorizeStatus
	;;
	hg)
	    hg fetch $@
	;;
	git)
	    git pull $@
	;;
    esac

    update_vcs_information
}
rup() {
    vcsroot up $@
}

dfcmd() {
    local cmd vcs base_dir

    cmd=$1
    shift

    vcs=$(whichvcs)
    case $vcs in
	svn)
	    svn diff --diff-cmd=$cmd $@
	;;
	cvs)
	    cvs diff $@
	;;
	hg)
	    base_dir=.
	    while [[ ! -d $base_dir/.hg ]]; do
		base_dir=$base_dir/..
	    done
	    for file in $(hg st | sed -n '/^M/ s/^M //p'); do
		echo
		print '\e[1;33m***' $file '***\e[0m'
		hg df $@ $base_dir/$file
	    done
	;;
	git)
	    if ((#)); then
		git df --color $@
	    else
		git df --color .
	    fi
	;;
    esac
}
df() {
    dfcmd colordiff $@
}
ds() {
    dfcmd colordiff --staged $@
}
vdf() {
    dfcmd vimdiff $@
}
vds() {
    dfcmd vimdiff --staged $@
}
kdf() {
    dfcmd kdiff3 $@
}
kds() {
    dfcmd kdiff3 --staged $@
}
rdf() {
    vcsroot df $@
}
rds() {
    vcsroot df --staged $@
}
rkdf() {
    vcsroot kdf $@
}
rkds() {
    vcsroot kdf --staged $@
}
dfl() {
    df $@ | less
}
dsl() {
    df --staged $@ | less
}
# Exactement pareil que dfl, mais avec une autre completion
sdfl() {
    dfl $@
}
rdfl() {
    vcsroot dfl $@
}
rdsl() {
    vcsroot dfl --staged $@
}
dc() {
    df -r committed $@
}
rdc() {
    vcsroot dc $@
}
dcl() {
    dfl -r committed $@
}
rdcl() {
    vcsroot dcl $@
}
dp() {
    df -r prev $@
}
rdp() {
    vcsroot dp $@
}
dpl() {
    dfl -r prev $@
}
rdpl() {
    vcsroot dpl $@
}

lcd() {
    colordiff $@ | less
}

dlf() {
    local cmd added removed difference

    cmd=$1
    shift

    added=$($cmd diff $@ | sed -n '/^+/p' | wc -l)
    removed=$($cmd diff $@ | sed -n '/^-/p' | wc -l)
    difference=$((added-removed))
    if ((difference > 0)) then
	echo "+$added\t-$removed\t(\e[32m+$difference\e[0m)"
    elif ((difference < 0)) then
	echo "+$added\t-$removed\t(\e[31m$difference\e[0m)"
    else
	echo "+$added\t-$removed\t(0)"
    fi
}

dla() {
    local cmd

    cmd=$1
    shift

    for file in $($cmd st | sed -n '/^M/ s/^M //p'); do
	printf "$file\t"
	dlf $cmd $@ $file
    done
    echo ----------
    printf 'Total\t'
    dlf $cmd $@
}

dl() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	*)
	    dla $vcs $@
	;;
    esac
}

dll() {
    dl $@ | less
}

rv() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	cvs|hg)
	    $vcs revert $@
	;;
	svn)
	    svn revert -R $@
	;;
	git)
	    git checkout $@
	;;
    esac
}

bo() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	hg)
	    hg backout --merge $@
	;;
	svn)
	    svn merge $@
	;;
	git)
	    git revert $@
	;;
    esac
}

lg() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	*)
	    $vcs log $@
	;;
    esac
}
rlg() {
    vcsroot lg $@
}
lgv() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	cvs)
	    $vcs log $@ | less
	;;
	git)
	    git log -v --graph $@
	;;
	*)
	    $vcs log -v $@ | less
	;;
    esac
}
rlgv() {
    vcsroot lgv $@
}
gl() {
    local vcs

    vcs=$(whichvcs)
    case $vcs in
	hg)
	    hg glog $@
	;;
	git)
	    git log --graph $@
	;;
    esac
}
lc() {
    lg -r committed $@
}
lcv() {
    lgv -r committed $@
}

purge() {
    local files

    files=()

    for file in $(nocolor st | sed -n 's/^? \+\(.\+\)$/\1/p'); do
	files+=($file)
    done

    echo 'Will purge the following files:'
    for file in $files; do
	echo "  $file"
    done
    echo 'Proceed?'
    read y
    if [[ $y != (y|Y) ]]; then
	echo 'Operation aborted' >&2
	return 1
    fi
    rm -r $files
}

fetch() {
    up $@
}
hin() {
    hg in $@
}
out() {
    hg out $@
}
cu() {
    svn cleanup $@
}
rcu() {
    vcsroot svn cleanup $@
}

av() {
    svnmerge avail $@
}
ava() {
    revs=()
    IFS=,
    for r in $(av); do
	if ((${#r} > 7)); then
	    IFS=-
	    a=($=r)
	    revs+=($(seq -s '-' $a[1] $a[2]))
	else
	    revs+=($r)
	fi
    done
    echo $revs
}

mg() {
    svnmerge merge -r $@
}

pmg() {
    svnmerge merge --record-only -r $@
}

bl() {
    svnmerge block -r $@
}

ub() {
    svnmerge unblock -r $@
}

rb() {
    # TODO hg rollback / backout, svnmerge rollback, svn merge -r
}

smv() {
    vcs=$(whichvcs)
    $vcs mv $@
}
